{"ast":null,"code":"var _jsxFileName = \"/Users/elidavidson/Desktop/hiloscope/src/UI/Ardupilot/FullParameterList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { TreeTable } from 'primereact/treetable';\nimport { Column } from 'primereact/column';\nimport { params } from './params'; // Assuming params is correctly imported\n\n// Function to recursively transform the nested data into a tree structure\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst transformData = (data, parentKey = null) => {\n  return Object.keys(data).map(key => {\n    const value = data[key];\n    const item = {\n      key: key,\n      value: value,\n      parent: parentKey,\n      children: []\n    };\n\n    // If the value is an object, recursively transform it into child rows\n    if (typeof value === 'object' && !Array.isArray(value)) {\n      item.children = transformData(value, key);\n    } else {\n      item.children = []; // If it's a simple value, no children\n    }\n    return item;\n  });\n};\nexport default function FullParameterList({\n  param_type\n}) {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    setLoading(true); // Set loading to true each time param_type changes\n\n    if (param_type === 'standard') {\n      // Handle standard param data loading (if needed)\n      setLoading(false);\n    } else if (param_type === 'advanced') {\n      console.log('Fetching advanced params...');\n      // Example: simulate empty data for now\n      setNodes([]);\n      setLoading(false);\n    } else if (param_type === 'full') {\n      const data = params.getFullParams(); // Fetching full parameters\n      console.log('Full list', data);\n\n      // Transform the full params into the tree structure\n      const transformedData = transformData(data[0]);\n      console.log('transformed data', transformedData);\n      setNodes(transformedData);\n      setLoading(false);\n    }\n  }, [param_type]);\n  useEffect(() => {\n    console.log('kV pairs', nodes);\n  }, [nodes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }, this) // Add a loading message\n    : nodes.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }, this) // Handle empty data case\n    : /*#__PURE__*/_jsxDEV(TreeTable, {\n      value: nodes,\n      tableStyle: {\n        minWidth: '50rem'\n      },\n      paginator: true,\n      rows: 10,\n      children: /*#__PURE__*/_jsxDEV(Column, {\n        field: \"key\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n_s(FullParameterList, \"bK5Q55XTtOnx6O+i6ckr8W3gp6w=\");\n_c = FullParameterList;\nvar _c;\n$RefreshReg$(_c, \"FullParameterList\");","map":{"version":3,"names":["React","useState","useEffect","TreeTable","Column","params","jsxDEV","_jsxDEV","transformData","data","parentKey","Object","keys","map","key","value","item","parent","children","Array","isArray","FullParameterList","param_type","_s","nodes","setNodes","loading","setLoading","console","log","getFullParams","transformedData","className","fileName","_jsxFileName","lineNumber","columnNumber","length","tableStyle","minWidth","paginator","rows","field","_c","$RefreshReg$"],"sources":["/Users/elidavidson/Desktop/hiloscope/src/UI/Ardupilot/FullParameterList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { TreeTable } from 'primereact/treetable';\nimport { Column } from 'primereact/column';\nimport { params } from './params'; // Assuming params is correctly imported\n\n// Function to recursively transform the nested data into a tree structure\nconst transformData = (data, parentKey = null) => {\n    return Object.keys(data).map(key => {\n        const value = data[key];\n        const item = {\n            key: key,\n            value: value,\n            parent: parentKey,\n            children: []\n        };\n\n        // If the value is an object, recursively transform it into child rows\n        if (typeof value === 'object' && !Array.isArray(value)) {\n            item.children = transformData(value, key);\n        } else {\n            item.children = []; // If it's a simple value, no children\n        }\n\n        return item;\n    });\n};\n\nexport default function FullParameterList({ param_type }) {\n    const [nodes,setNodes] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        setLoading(true); // Set loading to true each time param_type changes\n\n        if (param_type === 'standard') {\n            // Handle standard param data loading (if needed)\n            setLoading(false);\n        } else if (param_type === 'advanced') {\n            console.log('Fetching advanced params...');\n            // Example: simulate empty data for now\n            setNodes([]);\n            setLoading(false);\n        } else if (param_type === 'full') {\n            const data = params.getFullParams(); // Fetching full parameters\n            console.log('Full list', data);\n\n            // Transform the full params into the tree structure\n            const transformedData = transformData(data[0]);\n            console.log('transformed data',transformedData)\n            setNodes(transformedData);\n            setLoading(false);\n        }\n    }, [param_type]);\n\n    useEffect(() => {\n        console.log('kV pairs',nodes)\n    },[nodes])\n\n    return (\n        <div className=\"card\">\n            {loading ? (\n                <p>Loading data...</p> // Add a loading message\n            ) : nodes.length === 0 ? (\n                <p>No data available.</p> // Handle empty data case\n            ) : (\n                <TreeTable value={nodes} tableStyle={{ minWidth: '50rem' }} paginator rows={10}>\n                    <Column field=\"key\"/>\n                </TreeTable>\n            )}\n        </div>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}