{"ast":null,"code":"var _jsxFileName = \"/Users/elidavidson/Desktop/hiloscope/src/UI/Ardupilot/FullParameterList.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { TreeTable } from 'primereact/treetable';\nimport { Column } from 'primereact/column';\nimport { params } from './params';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FullParameterList({\n  param_type\n}) {\n  _s();\n  const [nodes, setNodes] = useState([]);\n\n  // Function to transform data for TreeTable\n  const transformData = data => {\n    return data.map(item => ({\n      ...item,\n      size: item.data,\n      // Assuming 'data' holds the size information\n      type: typeof item.data,\n      // Deriving the type from the value of 'data'\n      children: item.children && item.children.length > 0 ? transformData(item.children) : null // Recursively transform children\n    }));\n  };\n  useEffect(() => {\n    const data = params.getFullParams();\n    setNodes(transformData(data)); // Transform the data for TreeTable format\n  }, []);\n  useEffect(() => {\n    console.log('Nodes:', nodes);\n  }, [nodes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: /*#__PURE__*/_jsxDEV(TreeTable, {\n      value: nodes,\n      tableStyle: {\n        minWidth: '50rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Column, {\n        field: \"label\",\n        header: \"Name\",\n        expander: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        field: \"size\",\n        header: \"Size\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        field: \"type\",\n        header: \"Type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n_s(FullParameterList, \"aOcCv4Mr08XcotHcdYIIubqmewM=\");\n_c = FullParameterList;\nvar _c;\n$RefreshReg$(_c, \"FullParameterList\");","map":{"version":3,"names":["useState","useEffect","TreeTable","Column","params","jsxDEV","_jsxDEV","FullParameterList","param_type","_s","nodes","setNodes","transformData","data","map","item","size","type","children","length","getFullParams","console","log","className","value","tableStyle","minWidth","field","header","expander","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/elidavidson/Desktop/hiloscope/src/UI/Ardupilot/FullParameterList.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { TreeTable } from 'primereact/treetable';\nimport { Column } from 'primereact/column';\nimport { params } from './params';\n\nexport default function FullParameterList({ param_type }) {\n    const [nodes, setNodes] = useState([]);\n\n    // Function to transform data for TreeTable\n    const transformData = (data) => {\n        return data.map(item => ({\n            ...item,\n            size: item.data,  // Assuming 'data' holds the size information\n            type: typeof item.data,  // Deriving the type from the value of 'data'\n            children: item.children && item.children.length > 0 ? transformData(item.children) : null // Recursively transform children\n        }));\n    };\n\n    useEffect(() => {\n        const data = params.getFullParams();\n        setNodes(transformData(data));  // Transform the data for TreeTable format\n    }, []);\n\n    useEffect(() => {\n        console.log('Nodes:', nodes);\n    }, [nodes]);\n\n    return (\n        <div className=\"card\">\n            <TreeTable value={nodes} tableStyle={{ minWidth: '50rem' }}>\n                <Column field=\"label\" header=\"Name\" expander></Column>\n                <Column field=\"size\" header=\"Size\"></Column>\n                <Column field=\"type\" header=\"Type\"></Column>\n            </TreeTable>\n        </div>\n    );\n}\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,SAAS,QAAQ,sBAAsB;AAChD,SAASC,MAAM,QAAQ,mBAAmB;AAC1C,SAASC,MAAM,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,eAAe,SAASC,iBAAiBA,CAAC;EAAEC;AAAW,CAAC,EAAE;EAAAC,EAAA;EACtD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA,MAAMY,aAAa,GAAIC,IAAI,IAAK;IAC5B,OAAOA,IAAI,CAACC,GAAG,CAACC,IAAI,KAAK;MACrB,GAAGA,IAAI;MACPC,IAAI,EAAED,IAAI,CAACF,IAAI;MAAG;MAClBI,IAAI,EAAE,OAAOF,IAAI,CAACF,IAAI;MAAG;MACzBK,QAAQ,EAAEH,IAAI,CAACG,QAAQ,IAAIH,IAAI,CAACG,QAAQ,CAACC,MAAM,GAAG,CAAC,GAAGP,aAAa,CAACG,IAAI,CAACG,QAAQ,CAAC,GAAG,IAAI,CAAC;IAC9F,CAAC,CAAC,CAAC;EACP,CAAC;EAEDjB,SAAS,CAAC,MAAM;IACZ,MAAMY,IAAI,GAAGT,MAAM,CAACgB,aAAa,CAAC,CAAC;IACnCT,QAAQ,CAACC,aAAa,CAACC,IAAI,CAAC,CAAC,CAAC,CAAE;EACpC,CAAC,EAAE,EAAE,CAAC;EAENZ,SAAS,CAAC,MAAM;IACZoB,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEZ,KAAK,CAAC;EAChC,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,oBACIJ,OAAA;IAAKiB,SAAS,EAAC,MAAM;IAAAL,QAAA,eACjBZ,OAAA,CAACJ,SAAS;MAACsB,KAAK,EAAEd,KAAM;MAACe,UAAU,EAAE;QAAEC,QAAQ,EAAE;MAAQ,CAAE;MAAAR,QAAA,gBACvDZ,OAAA,CAACH,MAAM;QAACwB,KAAK,EAAC,OAAO;QAACC,MAAM,EAAC,MAAM;QAACC,QAAQ;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CAAC,eACtD3B,OAAA,CAACH,MAAM;QAACwB,KAAK,EAAC,MAAM;QAACC,MAAM,EAAC;MAAM;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CAAC,eAC5C3B,OAAA,CAACH,MAAM;QAACwB,KAAK,EAAC,MAAM;QAACC,MAAM,EAAC;MAAM;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACX,CAAC;AAEd;AAACxB,EAAA,CA/BuBF,iBAAiB;AAAA2B,EAAA,GAAjB3B,iBAAiB;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}