{"ast":null,"code":"var _jsxFileName = \"/Users/elidavidson/Desktop/hiloscope/src/UI/Home/Map.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, Circle, useMap } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport drone from '../images/drone.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Map() {\n  _s2();\n  var _s = $RefreshSig$();\n  const [location, setLocation] = useState(null);\n  const [userLocation, setUserLocation] = useState(null);\n  const [error, setError] = useState(null);\n  const [markers, setMarkers] = useState([]); // State to store multiple markers\n  const circleCenter = userLocation || [33.6411, -117.8425]; // Set a default center if userLocation is not available\n\n  useEffect(() => {\n    // Check if geolocation is available in the browser\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setLocation({\n          latitude,\n          longitude\n        });\n        setUserLocation([latitude, longitude]); // Set the user location\n      }, error => {\n        setError(error.message);\n      });\n    } else {\n      setError('Geolocation is not supported by this browser.');\n    }\n  }, []);\n\n  // Handle map click event to add markers\n  const handleMapClick = event => {\n    const {\n      lat,\n      lng\n    } = event.latlng;\n    console.log('Map clicked at:', lat, lng); // Debug log to check if the event is being fired\n    setMarkers(prevMarkers => [...prevMarkers, {\n      lat,\n      lng\n    }]); // Add new marker to state\n  };\n  const markerIcon = new L.Icon({\n    iconUrl: drone,\n    // Use the imported image as the icon URL\n    iconSize: [32, 32],\n    // Customize the size of the icon\n    iconAnchor: [16, 32],\n    // Anchor point of the icon\n    popupAnchor: [0, -32] // Popup anchor point\n  });\n  const waypointIcon = new L.Icon({\n    iconUrl: drone,\n    // Use the imported image as the icon URL\n    iconSize: [16, 16],\n    // Customize the size of the icon\n    iconAnchor: [16, 32],\n    // Anchor point of the icon\n    popupAnchor: [0, -32] // Popup anchor point\n  });\n\n  // Function to generate a random point within the circle's radius\n  const generateRandomPointWithinCircle = (center, radius) => {\n    const radiusInDegrees = radius / 111300; // Convert meters to degrees\n    const angle = Math.random() * 2 * Math.PI; // Random angle\n    const distance = Math.random() * radiusInDegrees; // Random distance within the circle\n\n    // Calculate the latitude and longitude for the random point\n    const lat = center[0] + distance * Math.cos(angle);\n    const lng = center[1] + distance * Math.sin(angle);\n    return [lat, lng];\n  };\n\n  // Custom Button Control\n  const CustomButton = () => {\n    _s();\n    const map = useMap(); // Access the map instance\n    useEffect(() => {\n      const buttonControl = L.control({\n        position: 'topright'\n      }); // Position the button at the top-right\n\n      buttonControl.onAdd = function () {\n        const button = L.DomUtil.create('button', 'leaflet-bar');\n        button.innerHTML = 'Add waypoint'; // Button text\n        button.style.backgroundColor = '#0078AA'; // Button color\n        button.style.color = '#fff';\n        button.style.padding = '10px';\n        button.style.borderRadius = '5px';\n        button.style.border = 'none';\n        button.style.cursor = 'pointer';\n\n        // Add an event listener to the button to add a pin marker within the circle\n        button.onclick = () => {\n          // Generate random coordinates within the circle\n          const [lat, lng] = generateRandomPointWithinCircle(circleCenter, 1609.34); // 1609.34 meters = 1 mile radius\n          setMarkers(prevMarkers => [...prevMarkers, {\n            lat,\n            lng\n          }]); // Add new marker to the state\n          console.log('Pin added at:', lat, lng);\n        };\n        return button;\n      };\n      buttonControl.addTo(map); // Add the button to the map\n      return () => {\n        buttonControl.remove(); // Cleanup on component unmount\n      };\n    }, [userLocation]);\n    return null;\n  };\n  _s(CustomButton, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n    return [useMap];\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: userLocation ? /*#__PURE__*/_jsxDEV(MapContainer, {\n      style: {\n        height: \"500px\",\n        width: \"100%\"\n      },\n      center: userLocation,\n      zoom: 13,\n      scrollWheelZoom: false,\n      onClick: handleMapClick,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Marker, {\n        position: userLocation,\n        icon: markerIcon,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: \"Your Current location\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Circle, {\n        center: circleCenter,\n        radius: 1609.34,\n        color: \"blue\",\n        fillColor: \"blue\",\n        fillOpacity: 0.2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 25\n      }, this), markers.map((marker, index) => /*#__PURE__*/_jsxDEV(Marker, {\n        position: [marker.lat, marker.lng],\n        icon: markerIcon,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: [\"A new marker at \", marker.lat, \", \", marker.lng]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 33\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 29\n      }, this)), /*#__PURE__*/_jsxDEV(CustomButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 25\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading user location...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n}\n\n/* import React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, Circle } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport drone from '../images/drone.png';\n\nexport default function Map() {\n    const [location, setLocation] = useState(null);\n    const [userLocation, setUserLocation] = useState(null);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        // Check if geolocation is available in the browser\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(\n                (position) => {\n                    const { latitude, longitude } = position.coords;\n                    setLocation({ latitude, longitude });\n                    setUserLocation([latitude, longitude]);  // Set the user location\n                },\n                (error) => {\n                    setError(error.message);\n                }\n            );\n        } else {\n            setError('Geolocation is not supported by this browser.');\n        }\n    }, []);\n\n    const markerIcon = new L.Icon({\n        iconUrl: drone,\n        iconSize: [32, 32],\n        iconAnchor: [16, 32],\n        popupAnchor: [0, -32],\n    });\n\n    return (\n        <div>\n            {\n                userLocation ?\n                    <MapContainer\n                        style={{ height: \"500px\", width: \"100%\" }}\n                        center={userLocation}\n                        zoom={13}\n                        scrollWheelZoom={false}\n                    >\n                        <TileLayer\n                            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n                            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                        />\n                        <Marker position={userLocation} icon={markerIcon}>\n                            <Popup>\n                                Your Current location\n                            </Popup>\n                        </Marker>\n\n                        <Circle center={userLocation} radius={1609.34} color=\"blue\" fillColor=\"blue\" fillOpacity={0.2} />\n                    </MapContainer>\n                    :\n                    <p>Loading your drone's current location location...</p>\n            }\n        </div>\n    )\n}\n */\n_s2(Map, \"adqemjEI4q0RB0VBO+OoyrGQNFQ=\");\n_c = Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","Marker","Popup","Circle","useMap","L","drone","jsxDEV","_jsxDEV","Map","_s2","_s","$RefreshSig$","location","setLocation","userLocation","setUserLocation","error","setError","markers","setMarkers","circleCenter","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","message","handleMapClick","event","lat","lng","latlng","console","log","prevMarkers","markerIcon","Icon","iconUrl","iconSize","iconAnchor","popupAnchor","waypointIcon","generateRandomPointWithinCircle","center","radius","radiusInDegrees","angle","Math","random","PI","distance","cos","sin","CustomButton","map","buttonControl","control","onAdd","button","DomUtil","create","innerHTML","style","backgroundColor","color","padding","borderRadius","border","cursor","onclick","addTo","remove","children","height","width","zoom","scrollWheelZoom","onClick","attribution","url","fileName","_jsxFileName","lineNumber","columnNumber","icon","fillColor","fillOpacity","marker","index","_c","$RefreshReg$"],"sources":["/Users/elidavidson/Desktop/hiloscope/src/UI/Home/Map.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, Circle, useMap } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport drone from '../images/drone.png';\n\nexport default function Map() {\n    const [location, setLocation] = useState(null);\n    const [userLocation, setUserLocation] = useState(null);\n    const [error, setError] = useState(null);\n    const [markers, setMarkers] = useState([]); // State to store multiple markers\n    const circleCenter = userLocation || [33.6411, -117.8425]; // Set a default center if userLocation is not available\n\n    useEffect(() => {\n        // Check if geolocation is available in the browser\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(\n                (position) => {\n                    const { latitude, longitude } = position.coords;\n                    setLocation({ latitude, longitude });\n                    setUserLocation([latitude, longitude]);  // Set the user location\n                },\n                (error) => {\n                    setError(error.message);\n                }\n            );\n        } else {\n            setError('Geolocation is not supported by this browser.');\n        }\n    }, []);\n\n    // Handle map click event to add markers\n    const handleMapClick = (event) => {\n        const { lat, lng } = event.latlng;\n        console.log('Map clicked at:', lat, lng); // Debug log to check if the event is being fired\n        setMarkers((prevMarkers) => [...prevMarkers, { lat, lng }]); // Add new marker to state\n    };\n\n    const markerIcon = new L.Icon({\n        iconUrl: drone,  // Use the imported image as the icon URL\n        iconSize: [32, 32],  // Customize the size of the icon\n        iconAnchor: [16, 32],  // Anchor point of the icon\n        popupAnchor: [0, -32],  // Popup anchor point\n    });\n\n    const waypointIcon = new L.Icon({\n        iconUrl: drone,  // Use the imported image as the icon URL\n        iconSize: [16, 16],  // Customize the size of the icon\n        iconAnchor: [16, 32],  // Anchor point of the icon\n        popupAnchor: [0, -32],  // Popup anchor point\n    });\n\n\n\n\n    // Function to generate a random point within the circle's radius\n    const generateRandomPointWithinCircle = (center, radius) => {\n        const radiusInDegrees = radius / 111300; // Convert meters to degrees\n        const angle = Math.random() * 2 * Math.PI; // Random angle\n        const distance = Math.random() * radiusInDegrees; // Random distance within the circle\n\n        // Calculate the latitude and longitude for the random point\n        const lat = center[0] + distance * Math.cos(angle);\n        const lng = center[1] + distance * Math.sin(angle);\n        return [lat, lng];\n    };\n\n    // Custom Button Control\n    const CustomButton = () => {\n        const map = useMap();  // Access the map instance\n        useEffect(() => {\n            const buttonControl = L.control({ position: 'topright' }); // Position the button at the top-right\n\n            buttonControl.onAdd = function () {\n                const button = L.DomUtil.create('button', 'leaflet-bar');\n                button.innerHTML = 'Add waypoint';  // Button text\n                button.style.backgroundColor = '#0078AA'; // Button color\n                button.style.color = '#fff';\n                button.style.padding = '10px';\n                button.style.borderRadius = '5px';\n                button.style.border = 'none';\n                button.style.cursor = 'pointer';\n\n                // Add an event listener to the button to add a pin marker within the circle\n                button.onclick = () => {\n                    // Generate random coordinates within the circle\n                    const [lat, lng] = generateRandomPointWithinCircle(circleCenter, 1609.34); // 1609.34 meters = 1 mile radius\n                    setMarkers((prevMarkers) => [...prevMarkers, { lat, lng }]); // Add new marker to the state\n                    console.log('Pin added at:', lat, lng);\n                };\n\n                return button;\n            };\n\n            buttonControl.addTo(map);  // Add the button to the map\n            return () => {\n                buttonControl.remove(); // Cleanup on component unmount\n            };\n        }, [userLocation]);\n\n        return null;\n    };\n\n    return (\n        <div>\n            {\n                userLocation ?\n                    <MapContainer\n                        style={{ height: \"500px\", width: \"100%\" }}\n                        center={userLocation}\n                        zoom={13}\n                        scrollWheelZoom={false}\n                        onClick={handleMapClick}\n                    >\n                        <TileLayer\n                            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n                            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                        />\n\n                        <Marker position={userLocation} icon={markerIcon}>\n                            <Popup>\n                                Your Current location\n                            </Popup>\n                        </Marker>\n\n                        {/* Adding the Circle */}\n                        <Circle center={circleCenter} radius={1609.34} color=\"blue\" fillColor=\"blue\" fillOpacity={0.2} />\n\n                        {/* Render all markers */}\n                        {markers.map((marker, index) => (\n                            <Marker key={index} position={[marker.lat, marker.lng]} icon={markerIcon}>\n                                <Popup>\n                                    A new marker at {marker.lat}, {marker.lng}\n                                </Popup>\n                            </Marker>\n                        ))}\n\n                        <CustomButton /> {/* Add the custom button */}\n                    </MapContainer>\n                    :\n                    <p>Loading user location...</p>\n            }\n        </div>\n    );\n}\n\n\n\n/* import React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, Circle } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport drone from '../images/drone.png';\n\nexport default function Map() {\n    const [location, setLocation] = useState(null);\n    const [userLocation, setUserLocation] = useState(null);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        // Check if geolocation is available in the browser\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(\n                (position) => {\n                    const { latitude, longitude } = position.coords;\n                    setLocation({ latitude, longitude });\n                    setUserLocation([latitude, longitude]);  // Set the user location\n                },\n                (error) => {\n                    setError(error.message);\n                }\n            );\n        } else {\n            setError('Geolocation is not supported by this browser.');\n        }\n    }, []);\n\n    const markerIcon = new L.Icon({\n        iconUrl: drone,\n        iconSize: [32, 32],\n        iconAnchor: [16, 32],\n        popupAnchor: [0, -32],\n    });\n\n    return (\n        <div>\n            {\n                userLocation ?\n                    <MapContainer\n                        style={{ height: \"500px\", width: \"100%\" }}\n                        center={userLocation}\n                        zoom={13}\n                        scrollWheelZoom={false}\n                    >\n                        <TileLayer\n                            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n                            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                        />\n                        <Marker position={userLocation} icon={markerIcon}>\n                            <Popup>\n                                Your Current location\n                            </Popup>\n                        </Marker>\n\n                        <Circle center={userLocation} radius={1609.34} color=\"blue\" fillColor=\"blue\" fillOpacity={0.2} />\n                    </MapContainer>\n                    :\n                    <p>Loading your drone's current location location...</p>\n            }\n        </div>\n    )\n}\n */"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}