{"ast":null,"code":"var _jsxFileName = \"/Users/elidavidson/Desktop/hiloscope/src/UI/Home/Map.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, Circle, useMap, Polyline, Tooltip } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport drone from '../images/drone.png';\nimport waypointpoint from '../images/pin.png';\nimport { Button } from 'primereact/button';\nimport { Dialog } from 'primereact/dialog';\nimport axios from 'axios';\nimport { Toast } from 'primereact/toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Map() {\n  _s2();\n  var _s = $RefreshSig$();\n  const [location, setLocation] = useState(null);\n  const [userLocation, setUserLocation] = useState(null);\n  const [error, setError] = useState(null);\n  const [markers, setMarkers] = useState([]); // State to store multiple markers\n  const circleCenter = userLocation || [33.6411, -117.8425]; // Set a default center if userLocation is not available\n  const [selectedMarkerId, setSelectedMarkerId] = useState(null);\n  const [confirmedWaypoints, setConfirmedWaypoints] = useState();\n  const toast = useRef(null);\n  useEffect(() => {\n    console.log('confirmed', confirmedWaypoints);\n  }, [confirmedWaypoints]);\n  const sendWaypoints = waypoints => {\n    console.log('Waypoints to send:', waypoints);\n\n    // Correctly set up the API endpoint and payload\n    axios.post('http://localhost:4000/send-waypoints', waypoints).then(res => {\n      console.log('Response from server:', res.data);\n    }).catch(error => {\n      console.error('Error sending waypoints:', error);\n    });\n  };\n  useEffect(() => {\n    // Check if geolocation is available in the browser\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        setLocation({\n          latitude,\n          longitude\n        });\n        setUserLocation([latitude, longitude]); // Set the user location\n      }, error => {\n        setError(error.message);\n      });\n    } else {\n      setError('Geolocation is not supported by this browser.');\n    }\n  }, []);\n\n  // Handle map click event to add markers\n  const handleMapClick = event => {\n    const {\n      lat,\n      lng\n    } = event.latlng;\n    console.log('Map clicked at:', lat, lng); // Debug log to check if the event is being fired\n    setMarkers(prevMarkers => [...prevMarkers, {\n      id: prevMarkers.length + 1,\n      lat,\n      lng\n    } // Assign a unique ID to each marker\n    ]); // Add new marker to state\n  };\n  const markerIcon = new L.Icon({\n    iconUrl: drone,\n    // Use the imported image as the icon URL\n    iconSize: [32, 32],\n    // Customize the size of the icon\n    iconAnchor: [16, 32],\n    // Anchor point of the icon\n    popupAnchor: [0, -32] // Popup anchor point\n  });\n  const waypointIcon = new L.Icon({\n    iconUrl: waypointpoint,\n    // Use the imported image as the icon URL\n    iconSize: [32, 32],\n    // Customize the size of the icon\n    iconAnchor: [16, 32],\n    // Anchor point of the icon\n    popupAnchor: [0, -32] // Popup anchor point\n  });\n  const selectedWaypointIcon = new L.Icon({\n    iconUrl: waypointpoint,\n    // Use the imported image as the icon URL\n    iconSize: [40, 40],\n    // Customize the size of the icon\n    iconAnchor: [16, 32],\n    // Anchor point of the icon\n    popupAnchor: [0, -32] // Popup anchor point\n  });\n  const handleMarkerClick = markerId => {\n    setSelectedMarkerId(markerId); // Set the selected marker\n    console.log(markers);\n  };\n\n  // Function to generate a random point within the circle's radius\n  const generateRandomPointWithinCircle = (center, radius) => {\n    const radiusInDegrees = radius / 111300; // Convert meters to degrees\n    const angle = Math.random() * 2 * Math.PI; // Random angle\n    const distance = Math.random() * radiusInDegrees; // Random distance within the circle\n\n    // Calculate the latitude and longitude for the random point\n    const lat = center[0] + distance * Math.cos(angle);\n    const lng = center[1] + distance * Math.sin(angle);\n    return [lat, lng];\n  };\n\n  // Restrict marker dragging to the circle's boundary\n  const handleDragEnd = (event, index) => {\n    const newLatLng = event.target.getLatLng();\n    const distance = mapDistance(newLatLng, circleCenter);\n    if (distance <= 1609.34) {\n      // Update the marker position if it is within the circle\n      setMarkers(prevMarkers => {\n        const updatedMarkers = [...prevMarkers];\n        updatedMarkers[index] = {\n          ...updatedMarkers[index],\n          lat: newLatLng.lat,\n          lng: newLatLng.lng\n        };\n        return updatedMarkers;\n      });\n      console.log('markers', markers);\n    } else {\n      // If out of bounds, revert to the old position (or handle as needed)\n      event.target.setLatLng([markers[index].lat, markers[index].lng]);\n    }\n  };\n\n  // Function to calculate the distance between two points (in meters)\n  const mapDistance = (latlng1, latlng2) => {\n    const R = 6371000; // Earth radius in meters\n    const φ1 = latlng1.lat * Math.PI / 180;\n    const φ2 = latlng2[0] * Math.PI / 180;\n    const Δφ = (latlng2[0] - latlng1.lat) * Math.PI / 180;\n    const Δλ = (latlng2[1] - latlng1.lng) * Math.PI / 180;\n    const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c; // Distance in meters\n  };\n\n  // Custom Button Control\n  const CustomButton = () => {\n    _s();\n    const map = useMap(); // Access the map instance\n    useEffect(() => {\n      const buttonControl = L.control({\n        position: 'topright'\n      }); // Position the button at the top-right\n      const removeWaypoint = L.control({\n        position: 'bottomright'\n      });\n      const confirmWaypoints = L.control({\n        position: 'bottomright'\n      });\n      removeWaypoint.onAdd = function () {\n        const button = L.DomUtil.create('button', 'leaflet-bar');\n        button.innerHTML = 'Remove waypoint';\n        button.style.backgroundColor = '#0078AA';\n        button.style.color = '#fff';\n        button.style.padding = '10px';\n        button.style.borderRadius = '5px';\n        button.style.border = 'none';\n        button.style.cursor = 'pointer';\n        button.onclick = () => {\n          console.log('selected', selectedMarkerId);\n          setMarkers(prevMarkers => prevMarkers.filter(marker => marker.id !== selectedMarkerId));\n        };\n        const updatedMarkers = markers.map((marker, index) => ({\n          ...marker,\n          id: index + 1\n        }));\n\n        //setMarkers(updatedMarkers)\n\n        return button;\n      };\n      confirmWaypoints.onAdd = function () {\n        const button = L.DomUtil.create('button', 'leaflet-bar');\n        button.innerHTML = 'Confirm waypoints'; // Button text\n        button.style.backgroundColor = '#0078AA'; // Button color\n        button.style.color = '#fff'; // Text color\n        button.style.padding = '10px';\n        button.style.borderRadius = '5px';\n        button.style.border = 'none';\n        button.style.cursor = 'pointer';\n        button.onclick = () => {\n          const allButtons = document.querySelectorAll('button');\n          console.log('all buttons', allButtons);\n          setConfirmedWaypoints(markers);\n          sendWaypoints(markers);\n          //hide other buttons or disable them\n          //send the waypoints coordinates to drone by calling the /get-waypoints api route\n          //use a default 50ft altitude\n        };\n        return button;\n      };\n      buttonControl.onAdd = function () {\n        const button = L.DomUtil.create('button', 'leaflet-bar');\n        button.innerHTML = 'Add waypoints';\n        button.style.backgroundColor = '#0078AA'; // Button color\n        button.style.color = '#fff'; // Text color\n        button.style.padding = '10px';\n        button.style.borderRadius = '5px';\n        button.style.border = 'none';\n        button.style.cursor = 'pointer';\n\n        // Add an event listener to the button to add a pin marker within the circle\n        button.onclick = () => {\n          const [lat, lng] = generateRandomPointWithinCircle(circleCenter, 1609.34); // 1609.34 meters = 1 mile radius\n          setMarkers(prevMarkers => [...prevMarkers, {\n            id: prevMarkers.length + 1,\n            lat,\n            lng\n          } // Assign a unique ID to each marker\n          ]); //\n          console.log('Pin added at:', lat, lng);\n          console.log('markers added', markers);\n        };\n        return button;\n      };\n      buttonControl.addTo(map);\n      if (markers.length > 0) {\n        confirmWaypoints.addTo(map);\n        removeWaypoint.addTo(map);\n      }\n      return () => {\n        buttonControl.remove(); // Cleanup on component unmount\n        confirmWaypoints.remove();\n        removeWaypoint.remove();\n      };\n    }, [userLocation]);\n    return null;\n  };\n  _s(CustomButton, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n    return [useMap];\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full\",\n    children: userLocation ? /*#__PURE__*/_jsxDEV(MapContainer, {\n      style: {\n        height: \"500px\",\n        width: \"100%\"\n      },\n      center: userLocation,\n      zoom: 14,\n      scrollWheelZoom: false,\n      onClick: handleMapClick,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Marker, {\n        position: userLocation,\n        icon: markerIcon,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: \"Your Current location\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Circle, {\n        center: circleCenter,\n        radius: 1609.34,\n        color: \"blue\",\n        fillColor: \"blue\",\n        fillOpacity: 0.2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 25\n      }, this), markers.map((marker, index) => /*#__PURE__*/_jsxDEV(Marker, {\n        // Use the marker ID as the key\n        position: [marker.lat, marker.lng]\n        //icon={waypointIcon}\n        ,\n        icon: marker.id === selectedMarkerId ? selectedWaypointIcon : waypointIcon,\n        draggable: true,\n        eventHandlers: {\n          click: () => handleMarkerClick(marker.id),\n          dragend: e => handleDragEnd(e, index)\n        },\n        children: [/*#__PURE__*/_jsxDEV(Popup, {\n          children: [\"Waypoint \", marker.id, \": \", marker.lat, \", \", marker.lng]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          permanent: true,\n          children: index + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 33\n        }, this)]\n      }, marker.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 29\n      }, this)), markers.length > 1 && /*#__PURE__*/_jsxDEV(Polyline, {\n        positions: markers.map(marker => [marker.lat, marker.lng]),\n        color: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(CustomButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading drone location...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 9\n  }, this);\n}\n_s2(Map, \"EsUaVvtWquUtfndlb+eaLHiyifE=\");\n_c = Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","useRef","MapContainer","TileLayer","Marker","Popup","Circle","useMap","Polyline","Tooltip","L","drone","waypointpoint","Button","Dialog","axios","Toast","jsxDEV","_jsxDEV","Map","_s2","_s","$RefreshSig$","location","setLocation","userLocation","setUserLocation","error","setError","markers","setMarkers","circleCenter","selectedMarkerId","setSelectedMarkerId","confirmedWaypoints","setConfirmedWaypoints","toast","console","log","sendWaypoints","waypoints","post","then","res","data","catch","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","message","handleMapClick","event","lat","lng","latlng","prevMarkers","id","length","markerIcon","Icon","iconUrl","iconSize","iconAnchor","popupAnchor","waypointIcon","selectedWaypointIcon","handleMarkerClick","markerId","generateRandomPointWithinCircle","center","radius","radiusInDegrees","angle","Math","random","PI","distance","cos","sin","handleDragEnd","index","newLatLng","target","getLatLng","mapDistance","updatedMarkers","setLatLng","latlng1","latlng2","R","φ1","φ2","Δφ","Δλ","a","c","atan2","sqrt","CustomButton","map","buttonControl","control","removeWaypoint","confirmWaypoints","onAdd","button","DomUtil","create","innerHTML","style","backgroundColor","color","padding","borderRadius","border","cursor","onclick","filter","marker","allButtons","document","querySelectorAll","addTo","remove","className","children","height","width","zoom","scrollWheelZoom","onClick","attribution","url","fileName","_jsxFileName","lineNumber","columnNumber","icon","fillColor","fillOpacity","draggable","eventHandlers","click","dragend","e","permanent","positions","_c","$RefreshReg$"],"sources":["/Users/elidavidson/Desktop/hiloscope/src/UI/Home/Map.js"],"sourcesContent":["\nimport React, { useState, useEffect, useRef } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, Circle, useMap, Polyline, Tooltip } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport drone from '../images/drone.png';\nimport waypointpoint from '../images/pin.png';\nimport { Button } from 'primereact/button';\nimport { Dialog } from 'primereact/dialog';\nimport axios from 'axios';\nimport { Toast } from 'primereact/toast';\n\n\n\nexport default function Map() {\n    const [location, setLocation] = useState(null);\n    const [userLocation, setUserLocation] = useState(null);\n    const [error, setError] = useState(null);\n    const [markers, setMarkers] = useState([]); // State to store multiple markers\n    const circleCenter = userLocation || [33.6411, -117.8425]; // Set a default center if userLocation is not available\n    const [selectedMarkerId, setSelectedMarkerId] = useState(null)\n    const [confirmedWaypoints, setConfirmedWaypoints] = useState()\n    const toast = useRef(null);\n\n\n    useEffect(() => {\n        console.log('confirmed', confirmedWaypoints)\n    }, [confirmedWaypoints])\n\n    const sendWaypoints = (waypoints) => {\n\n        console.log('Waypoints to send:', waypoints);\n\n        // Correctly set up the API endpoint and payload\n        axios.post('http://localhost:4000/send-waypoints', waypoints)\n            .then((res) => {\n                console.log('Response from server:', res.data);\n            })\n            .catch((error) => {\n                console.error('Error sending waypoints:', error);\n            });\n    };\n\n\n    useEffect(() => {\n        // Check if geolocation is available in the browser\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(\n                (position) => {\n                    const { latitude, longitude } = position.coords;\n                    setLocation({ latitude, longitude });\n                    setUserLocation([latitude, longitude]);  // Set the user location\n                },\n                (error) => {\n                    setError(error.message);\n                }\n            );\n        } else {\n            setError('Geolocation is not supported by this browser.');\n        }\n    }, []);\n\n    // Handle map click event to add markers\n    const handleMapClick = (event) => {\n        const { lat, lng } = event.latlng;\n        console.log('Map clicked at:', lat, lng); // Debug log to check if the event is being fired\n        setMarkers((prevMarkers) => [\n            ...prevMarkers,\n            { id: prevMarkers.length + 1, lat, lng }, // Assign a unique ID to each marker\n        ]); // Add new marker to state\n    };\n\n    const markerIcon = new L.Icon({\n        iconUrl: drone,  // Use the imported image as the icon URL\n        iconSize: [32, 32],  // Customize the size of the icon\n        iconAnchor: [16, 32],  // Anchor point of the icon\n        popupAnchor: [0, -32],  // Popup anchor point\n    });\n\n    const waypointIcon = new L.Icon({\n        iconUrl: waypointpoint,  // Use the imported image as the icon URL\n        iconSize: [32, 32],  // Customize the size of the icon\n        iconAnchor: [16, 32],  // Anchor point of the icon\n        popupAnchor: [0, -32],  // Popup anchor point\n    });\n\n    const selectedWaypointIcon = new L.Icon({\n        iconUrl: waypointpoint,  // Use the imported image as the icon URL\n        iconSize: [40, 40],  // Customize the size of the icon\n        iconAnchor: [16, 32],  // Anchor point of the icon\n        popupAnchor: [0, -32],  // Popup anchor point\n    });\n\n\n    const handleMarkerClick = (markerId) => {\n        setSelectedMarkerId(markerId); // Set the selected marker\n        console.log(markers)\n    };\n\n\n\n\n\n\n\n    // Function to generate a random point within the circle's radius\n    const generateRandomPointWithinCircle = (center, radius) => {\n        const radiusInDegrees = radius / 111300; // Convert meters to degrees\n        const angle = Math.random() * 2 * Math.PI; // Random angle\n        const distance = Math.random() * radiusInDegrees; // Random distance within the circle\n\n        // Calculate the latitude and longitude for the random point\n        const lat = center[0] + distance * Math.cos(angle);\n        const lng = center[1] + distance * Math.sin(angle);\n        return [lat, lng];\n    };\n\n    // Restrict marker dragging to the circle's boundary\n    const handleDragEnd = (event, index) => {\n        const newLatLng = event.target.getLatLng();\n        const distance = mapDistance(newLatLng, circleCenter);\n\n        if (distance <= 1609.34) {\n            // Update the marker position if it is within the circle\n            setMarkers((prevMarkers) => {\n                const updatedMarkers = [...prevMarkers];\n                updatedMarkers[index] = { ...updatedMarkers[index], lat: newLatLng.lat, lng: newLatLng.lng };\n                return updatedMarkers;\n            });\n            console.log('markers', markers);\n        } else {\n            // If out of bounds, revert to the old position (or handle as needed)\n            event.target.setLatLng([markers[index].lat, markers[index].lng]);\n        }\n    };\n\n    // Function to calculate the distance between two points (in meters)\n    const mapDistance = (latlng1, latlng2) => {\n        const R = 6371000; // Earth radius in meters\n        const φ1 = latlng1.lat * Math.PI / 180;\n        const φ2 = latlng2[0] * Math.PI / 180;\n        const Δφ = (latlng2[0] - latlng1.lat) * Math.PI / 180;\n        const Δλ = (latlng2[1] - latlng1.lng) * Math.PI / 180;\n\n        const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\n            Math.cos(φ1) * Math.cos(φ2) *\n            Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n        return R * c; // Distance in meters\n    };\n\n    // Custom Button Control\n    const CustomButton = () => {\n        const map = useMap();  // Access the map instance\n        useEffect(() => {\n            const buttonControl = L.control({ position: 'topright' }); // Position the button at the top-right\n            const removeWaypoint = L.control({ position: 'bottomright' })\n            const confirmWaypoints = L.control({ position: 'bottomright' })\n\n\n            removeWaypoint.onAdd = function () {\n                const button = L.DomUtil.create('button', 'leaflet-bar');\n                button.innerHTML = 'Remove waypoint';\n                button.style.backgroundColor = '#0078AA';\n                button.style.color = '#fff';\n                button.style.padding = '10px';\n                button.style.borderRadius = '5px';\n                button.style.border = 'none';\n                button.style.cursor = 'pointer';\n\n                button.onclick = () => {\n\n                    console.log('selected', selectedMarkerId)\n\n                    setMarkers((prevMarkers) =>\n                        prevMarkers.filter((marker) => marker.id !== selectedMarkerId)\n                    );\n                }\n\n                const updatedMarkers = markers.map((marker, index) => ({\n                    ...marker,\n                    id: index + 1,\n                }));\n\n                //setMarkers(updatedMarkers)\n\n                return button\n            }\n\n            confirmWaypoints.onAdd = function () {\n                const button = L.DomUtil.create('button', 'leaflet-bar');\n                button.innerHTML = 'Confirm waypoints';  // Button text\n                button.style.backgroundColor = '#0078AA'; // Button color\n                button.style.color = '#fff';  // Text color\n                button.style.padding = '10px';\n                button.style.borderRadius = '5px';\n                button.style.border = 'none';\n                button.style.cursor = 'pointer';\n\n\n                button.onclick = () => {\n                    const allButtons = document.querySelectorAll('button');\n                    console.log('all buttons', allButtons)\n\n                    setConfirmedWaypoints(markers)\n                    sendWaypoints(markers)\n                    //hide other buttons or disable them\n                    //send the waypoints coordinates to drone by calling the /get-waypoints api route\n                    //use a default 50ft altitude\n\n                }\n\n                return button\n            }\n\n            buttonControl.onAdd = function () {\n                const button = L.DomUtil.create('button', 'leaflet-bar');\n                button.innerHTML = 'Add waypoints';\n                button.style.backgroundColor = '#0078AA'; // Button color\n                button.style.color = '#fff';  // Text color\n                button.style.padding = '10px';\n                button.style.borderRadius = '5px';\n                button.style.border = 'none';\n                button.style.cursor = 'pointer';\n\n                // Add an event listener to the button to add a pin marker within the circle\n                button.onclick = () => {\n\n                    const [lat, lng] = generateRandomPointWithinCircle(circleCenter, 1609.34); // 1609.34 meters = 1 mile radius\n                    setMarkers((prevMarkers) => [\n                        ...prevMarkers,\n                        { id: prevMarkers.length + 1, lat, lng }, // Assign a unique ID to each marker\n                    ]); //\n                    console.log('Pin added at:', lat, lng);\n                    console.log('markers added', markers)\n                };\n\n                return button;\n            };\n\n            buttonControl.addTo(map)\n            if (markers.length > 0) {\n\n                confirmWaypoints.addTo(map)\n                removeWaypoint.addTo(map)\n            }\n            return () => {\n                buttonControl.remove(); // Cleanup on component unmount\n                confirmWaypoints.remove()\n                removeWaypoint.remove()\n            };\n        }, [userLocation]);\n\n        return null;\n    };\n\n    return (\n        <div className='w-full'>\n            {\n                userLocation ?\n                    <MapContainer\n                        style={{ height: \"500px\", width: \"100%\" }}\n                        center={userLocation}\n                        zoom={14}\n                        scrollWheelZoom={false}\n                        onClick={handleMapClick}\n                    >\n                        <TileLayer\n                            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n                            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                        />\n\n                        <Marker position={userLocation} icon={markerIcon}>\n                            <Popup>\n                                Your Current location\n                            </Popup>\n                        </Marker>\n\n                        {/* Adding the Circle */}\n                        <Circle center={circleCenter} radius={1609.34} color=\"blue\" fillColor=\"blue\" fillOpacity={0.2} />\n\n                        {/* Render all markers */}\n                        {markers.map((marker, index) => (\n                            <Marker\n                                key={marker.id} // Use the marker ID as the key\n                                position={[marker.lat, marker.lng]}\n                                //icon={waypointIcon}\n                                icon={marker.id === selectedMarkerId ? selectedWaypointIcon : waypointIcon}\n                                draggable={true}\n                                eventHandlers={{\n                                    click: () => handleMarkerClick(marker.id),\n                                    dragend: (e) => handleDragEnd(e, index),\n                                }}\n                            >\n                                <Popup>\n                                    Waypoint {marker.id}: {marker.lat}, {marker.lng}\n                                </Popup>\n                                <Tooltip permanent>\n                                    {index + 1}\n                                </Tooltip>\n                            </Marker>\n                        ))}\n                        {markers.length > 1 && (\n                            <Polyline positions={markers.map(marker => [marker.lat, marker.lng])} color=\"red\" />\n                        )}\n\n                        <CustomButton />\n                    </MapContainer>\n                    :\n                    <p>Loading drone location...</p>\n            }\n        </div>\n    );\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}