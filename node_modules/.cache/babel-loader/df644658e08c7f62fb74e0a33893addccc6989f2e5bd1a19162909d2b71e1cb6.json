{"ast":null,"code":"var _jsxFileName = \"/Users/elidavidson/Desktop/hiloscope/src/UI/Ardupilot/FullParameterList.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { TreeTable } from 'primereact/treetable';\nimport { Column } from 'primereact/column';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FullParameterList({\n  param_type\n}) {\n  _s();\n  const [keyValuePairs, setKeyValuePairs] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    setLoading(true);\n    if (param_type === 'full') {\n      // Example data from params or your source\n      const data = [{\n        \"ACRO\": {\n          \"ACRO_BAL\": {\n            \"PITCH\": 1,\n            \"ROLL\": 1\n          },\n          \"ACRO_OPTIONS\": 0,\n          \"ACRO_RP\": {\n            \"EXPO\": 0.3,\n            \"RATE\": 360,\n            \"RATE_TC\": 0\n          },\n          \"ACRO_THR\": {\n            \"MID\": 0\n          },\n          \"ACRO_TRAINER\": 2,\n          \"ACRO_Y\": {\n            \"EXPO\": 0,\n            \"RATE\": 202.5,\n            \"RATE_TC\": 0\n          }\n        }\n      }];\n      const transformedData = transformDataToTree(data);\n      setKeyValuePairs(transformedData);\n      setLoading(false);\n    } else {\n      setKeyValuePairs([]);\n      setLoading(false);\n    }\n  }, [param_type]);\n\n  // Helper function to convert the flattened data into a tree structure\n  const transformDataToTree = data => {\n    const treeData = [];\n    const flatten = (obj, parentKey = '') => {\n      Object.keys(obj).forEach(key => {\n        const newKey = parentKey ? `${parentKey}.${key}` : key;\n        if (typeof obj[key] === 'object' && obj[key] !== null) {\n          const children = flatten(obj[key], newKey);\n          treeData.push({\n            key: newKey,\n            label: key,\n            category: parentKey,\n            children: children\n          });\n        } else {\n          treeData.push({\n            key: newKey,\n            label: key,\n            category: parentKey,\n            value: obj[key]\n          });\n        }\n      });\n    };\n    data.forEach(item => flatten(item));\n    return treeData;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }, this) : keyValuePairs.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(TreeTable, {\n      value: keyValuePairs,\n      tableStyle: {\n        minWidth: '50rem'\n      },\n      paginator: true,\n      rows: 10,\n      children: [/*#__PURE__*/_jsxDEV(Column, {\n        field: \"key\",\n        header: \"Key\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        field: \"label\",\n        header: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        field: \"category\",\n        header: \"Category\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        field: \"value\",\n        header: \"Value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n}\n_s(FullParameterList, \"f9VCtKnjf6N/FpDgzfuctULYjig=\");\n_c = FullParameterList;\nvar _c;\n$RefreshReg$(_c, \"FullParameterList\");","map":{"version":3,"names":["useState","useEffect","TreeTable","Column","jsxDEV","_jsxDEV","FullParameterList","param_type","_s","keyValuePairs","setKeyValuePairs","loading","setLoading","data","transformedData","transformDataToTree","treeData","flatten","obj","parentKey","Object","keys","forEach","key","newKey","children","push","label","category","value","item","className","fileName","_jsxFileName","lineNumber","columnNumber","length","tableStyle","minWidth","paginator","rows","field","header","_c","$RefreshReg$"],"sources":["/Users/elidavidson/Desktop/hiloscope/src/UI/Ardupilot/FullParameterList.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { TreeTable } from 'primereact/treetable';\nimport { Column } from 'primereact/column';\n\nexport default function FullParameterList({ param_type }) {\n    const [keyValuePairs, setKeyValuePairs] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        setLoading(true);\n\n        if (param_type === 'full') {\n            // Example data from params or your source\n            const data = [\n                {\n                    \"ACRO\": {\n                        \"ACRO_BAL\": {\n                            \"PITCH\": 1,\n                            \"ROLL\": 1\n                        },\n                        \"ACRO_OPTIONS\": 0,\n                        \"ACRO_RP\": {\n                            \"EXPO\": 0.3,\n                            \"RATE\": 360,\n                            \"RATE_TC\": 0\n                        },\n                        \"ACRO_THR\": {\n                            \"MID\": 0\n                        },\n                        \"ACRO_TRAINER\": 2,\n                        \"ACRO_Y\": {\n                            \"EXPO\": 0,\n                            \"RATE\": 202.5,\n                            \"RATE_TC\": 0\n                        }\n                    },\n                   \n                }\n            ];\n\n            const transformedData = transformDataToTree(data);\n            setKeyValuePairs(transformedData);\n            setLoading(false);\n        } else {\n            setKeyValuePairs([]);\n            setLoading(false);\n        }\n    }, [param_type]);\n\n    // Helper function to convert the flattened data into a tree structure\n    const transformDataToTree = (data) => {\n        const treeData = [];\n\n        const flatten = (obj, parentKey = '') => {\n            Object.keys(obj).forEach(key => {\n                const newKey = parentKey ? `${parentKey}.${key}` : key;\n                if (typeof obj[key] === 'object' && obj[key] !== null) {\n                    const children = flatten(obj[key], newKey);\n                    treeData.push({\n                        key: newKey,\n                        label: key,\n                        category: parentKey,\n                        children: children\n                    });\n                } else {\n                    treeData.push({\n                        key: newKey,\n                        label: key,\n                        category: parentKey,\n                        value: obj[key]\n                    });\n                }\n            });\n        };\n\n        data.forEach(item => flatten(item));\n\n        return treeData;\n    };\n\n    return (\n        <div className=\"card\">\n            {loading ? (\n                <p>Loading data...</p>\n            ) : keyValuePairs.length === 0 ? (\n                <p>No data available.</p>\n            ) : (\n                <TreeTable value={keyValuePairs} tableStyle={{ minWidth: '50rem' }} paginator rows={10}>\n                    <Column field=\"key\" header=\"Key\"></Column>\n                    <Column field=\"label\" header=\"Name\"></Column>\n                    <Column field=\"category\" header=\"Category\"></Column>\n                    <Column field=\"value\" header=\"Value\"></Column>\n                </TreeTable>\n            )}\n        </div>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}