{"ast":null,"code":"var _jsxFileName = \"/Users/elidavidson/Desktop/hiloscope/src/UI/Ardupilot/FullParameterList.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { TreeTable } from 'primereact/treetable';\nimport { Column } from 'primereact/column';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FullParameterList({\n  param_type\n}) {\n  _s();\n  const [keyValuePairs, setKeyValuePairs] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    setLoading(true);\n    if (param_type === 'full') {\n      // Example data from params or your source\n      const data = [{\n        key: '0-0',\n        label: 'ACRO',\n        children: [{\n          \"ACRO_BAL\": {\n            key: '0-0-1',\n            \"PITCH\": 1,\n            \"ROLL\": 1\n          },\n          \"ACRO_OPTIONS\": 0,\n          \"ACRO_RP\": {\n            \"EXPO\": 0.3,\n            \"RATE\": 360,\n            \"RATE_TC\": 0\n          },\n          \"ACRO_THR\": {\n            \"MID\": 0\n          },\n          \"ACRO_TRAINER\": 2,\n          \"ACRO_Y\": {\n            \"EXPO\": 0,\n            \"RATE\": 202.5,\n            \"RATE_TC\": 0\n          }\n        }]\n      }];\n      const transformedData = transformDataToTree(data);\n      setKeyValuePairs(transformedData);\n      setLoading(false);\n    } else {\n      setKeyValuePairs([]);\n      setLoading(false);\n    }\n  }, [param_type]);\n\n  // Helper function to convert the flattened data into a tree structure\n  const transformDataToTree = data => {\n    const treeData = [];\n    const flatten = (obj, parentKey = '', parentCategory = '') => {\n      Object.keys(obj).forEach(key => {\n        const newKey = parentKey ? `${parentKey}.${key}` : key;\n        const newCategory = parentCategory ? `${parentCategory}.${key}` : key;\n        if (typeof obj[key] === 'object' && obj[key] !== null) {\n          // Recursively process the nested object and assign the `children`\n          const children = flatten(obj[key], newKey, newCategory);\n          treeData.push({\n            key: newKey,\n            label: key,\n            category: parentCategory,\n            children: children\n          });\n        } else {\n          treeData.push({\n            key: newKey,\n            label: key,\n            category: parentCategory,\n            value: obj[key]\n          });\n        }\n      });\n      return treeData;\n    };\n    data.forEach(item => {\n      const rootKey = Object.keys(item)[0];\n      treeData.push({\n        key: rootKey,\n        label: rootKey,\n        category: '',\n        children: flatten(item[rootKey], rootKey, rootKey)\n      });\n    });\n    console.log('Transformed Data:', treeData); // Debugging: See the structure of the treeData\n    return treeData;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }, this) : keyValuePairs.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(TreeTable, {\n      value: keyValuePairs,\n      tableStyle: {\n        minWidth: '50rem'\n      },\n      paginator: true,\n      rows: 10,\n      children: [/*#__PURE__*/_jsxDEV(Column, {\n        field: \"key\",\n        header: \"Key\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        field: \"label\",\n        header: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        field: \"category\",\n        header: \"Category\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Column, {\n        field: \"value\",\n        header: \"Value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n}\n_s(FullParameterList, \"f9VCtKnjf6N/FpDgzfuctULYjig=\");\n_c = FullParameterList;\nvar _c;\n$RefreshReg$(_c, \"FullParameterList\");","map":{"version":3,"names":["useState","useEffect","TreeTable","Column","jsxDEV","_jsxDEV","FullParameterList","param_type","_s","keyValuePairs","setKeyValuePairs","loading","setLoading","data","key","label","children","transformedData","transformDataToTree","treeData","flatten","obj","parentKey","parentCategory","Object","keys","forEach","newKey","newCategory","push","category","value","item","rootKey","console","log","className","fileName","_jsxFileName","lineNumber","columnNumber","length","tableStyle","minWidth","paginator","rows","field","header","_c","$RefreshReg$"],"sources":["/Users/elidavidson/Desktop/hiloscope/src/UI/Ardupilot/FullParameterList.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { TreeTable } from 'primereact/treetable';\nimport { Column } from 'primereact/column';\n\nexport default function FullParameterList({ param_type }) {\n    const [keyValuePairs, setKeyValuePairs] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        setLoading(true);\n\n        if (param_type === 'full') {\n            // Example data from params or your source\n            const data = [\n                {\n                    key:'0-0',\n                    label:'ACRO',\n\n                    children: [{\n                        \"ACRO_BAL\": {\n                            key:'0-0-1',\n                            \"PITCH\": 1,\n                            \"ROLL\": 1\n                        },\n                        \"ACRO_OPTIONS\": 0,\n                        \"ACRO_RP\": {\n                            \"EXPO\": 0.3,\n                            \"RATE\": 360,\n                            \"RATE_TC\": 0\n                        },\n                        \"ACRO_THR\": {\n                            \"MID\": 0\n                        },\n                        \"ACRO_TRAINER\": 2,\n                        \"ACRO_Y\": {\n                            \"EXPO\": 0,\n                            \"RATE\": 202.5,\n                            \"RATE_TC\": 0\n                        }\n                    }],\n                    \n                }\n            ];\n\n            const transformedData = transformDataToTree(data);\n            setKeyValuePairs(transformedData);\n            setLoading(false);\n        } else {\n            setKeyValuePairs([]);\n            setLoading(false);\n        }\n    }, [param_type]);\n\n    // Helper function to convert the flattened data into a tree structure\n    const transformDataToTree = (data) => {\n        const treeData = [];\n\n        const flatten = (obj, parentKey = '', parentCategory = '') => {\n            Object.keys(obj).forEach(key => {\n                const newKey = parentKey ? `${parentKey}.${key}` : key;\n                const newCategory = parentCategory ? `${parentCategory}.${key}` : key;\n                \n                if (typeof obj[key] === 'object' && obj[key] !== null) {\n                    // Recursively process the nested object and assign the `children`\n                    const children = flatten(obj[key], newKey, newCategory);\n                    treeData.push({\n                        key: newKey,\n                        label: key,\n                        category: parentCategory,\n                        children: children\n                    });\n                } else {\n                    treeData.push({\n                        key: newKey,\n                        label: key,\n                        category: parentCategory,\n                        value: obj[key]\n                    });\n                }\n            });\n            return treeData;\n        };\n\n        data.forEach(item => {\n            const rootKey = Object.keys(item)[0];\n            treeData.push({\n                key: rootKey,\n                label: rootKey,\n                category: '',\n                children: flatten(item[rootKey], rootKey, rootKey)\n            });\n        });\n\n        console.log('Transformed Data:', treeData);  // Debugging: See the structure of the treeData\n        return treeData;\n    };\n\n    return (\n        <div className=\"card\">\n            {loading ? (\n                <p>Loading data...</p>\n            ) : keyValuePairs.length === 0 ? (\n                <p>No data available.</p>\n            ) : (\n                <TreeTable value={keyValuePairs} tableStyle={{ minWidth: '50rem' }} paginator rows={10}>\n                    <Column field=\"key\" header=\"Key\" />\n                    <Column field=\"label\" header=\"Name\" />\n                    <Column field=\"category\" header=\"Category\" />\n                    <Column field=\"value\" header=\"Value\" />\n                </TreeTable>\n            )}\n        </div>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}